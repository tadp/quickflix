== QuickFlix

This is a demo application that mimics the functionality of Netflix. It is a non-trivial e-commerce application that aims to reflect the best practices and workflows of experienced developers.  This app has the following features:

* Full payment processing
* Account management
* Administration capabilities

Users are able to create an account, authenticate, invite friends, reset their password and select videos to add to a queue.

Admins are able to upload images that are served through Amazon S3 and see past payments through a Stripe webhook JSON request.

**Demo:** [http://quickflix.herokuapp.com/](http://quickflix.herokuapp.com/)

**Source:** [https://github.com/tadp/quickflix](https://github.com/tadp/quickflix)

Login as Admin or Registering a test user:

* Register as test user: Use CC#: 4242424242424242, CVC: 123
* Login as Admin: email: 'bob@example.com', pw: 'password'

**Goals**

I started from a mock-up made of simple html templates since the main purpose was to go deep into Rails and testing best practices. All content was replaced with my own data and every Rails route, Controller, and Model, Service Object, Decorator, Mock and spec was created from scratch.

 "Growing Object-Oriented Software Guided by Tests"(GOOS) recommends creating a workable "skeleton" before layering on tests.  I used a "Meet in the Middle" TDD approach during development process. I used shoulda-matchers for model tests, controller tests to guard the controllers and feature specs in Capybara for integration tests that spanned the model, controller and view. I submitted each feature branch for review through a pull request before it was integrated into master to make sure that master was continuously deployable. Along with learning best practices, I aimed to add features seen in other enterprise level web apps such as:

* AWS S3 - To serve Static Assets
* Stripe for Payment/Subscription Processing
* Implementing a queue for users to track videos using transactions 
* Delayed jobs(Sidekiq/Resque/Redis) to push non-critical actions into the background asynchronously, making the app more responsive and able to scale to many users
* Added social features, where users can 'follow' other users.
* Tokens to anonymize data using MD5 hashing, Reset password feature, Invite a friend to Sign-up)
* Admin Section - To add more videos
* 3rd Party SMTP Integration - Mailgun to deploy System Email notifications
* Along with best Practices, like (Skinny Controller, Fat Models)


**Installation**

  git clone git@github.com:tadp/quickflix.git
  cd quickflix
  bundle install
  rake db:migrate db:seed
  rails s

**External Dependencies**

- sqlite: for local development, postgres in production
- redis:  background processing for email notification
- smtp server: Sending out emails
- Stripe: API Keys for handling payments
- AWS S3: Hosting static assets
- Mailgun - API Keys for SMTP Server

